name: Build-Test-Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_env:
        type: choice
        description: Release environment
        required: true
        options:
          - dev
          - prod

env:
  NODE_VERSION: 20

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install deps
        run: npm ci

      - name: Run build & pack
        run: |
          npm run build
          zip -r build.zip dist

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

      - name: Determine Version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # 只決定新版本，不自動 bump，release 時才用
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ./artifacts

      - name: Run automated tests
        run: |
          echo "Running automated tests..."
          npm test

  release:
    runs-on: ubuntu-latest
    needs: test
    environment: ${{ github.event.inputs.release_env || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: Set tag
        id: tag
        run: |
          if [ "${{ github.event.inputs.release_env }}" = "prod" ]; then
            TAG="prod-${{ needs.build.outputs.new_version }}"
            RELEASE_NAME="prod-${{ needs.build.outputs.new_version }}"
            BODY="Production release"
          else
            TAG="dev-v-${{ github.run_number }}"
            RELEASE_NAME="dev-v-${{ github.run_number }}"
            BODY="Automated dev release after successful tests"
          fi
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "body=$BODY" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          release_name: ${{ steps.tag.outputs.release_name }}
          body: ${{ steps.tag.outputs.body }}
          draft: false
          prerelease: ${{ github.event.inputs.release_env != 'prod' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build.zip
          asset_name: build.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
