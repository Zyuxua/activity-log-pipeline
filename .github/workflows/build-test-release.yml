name: CI/CD Pipeline Advanced

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 20

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run aggregated tests (mock)
        run: |
          echo "Running aggregated tests..."
          echo "→ unit tests: OK"
          echo "→ integration tests: OK"
          exit 0

      - name: Build project
        run: |
          npm run build
          zip -r build.zip dist

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

      - name: Determine Version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH-$(date +%s)"
          echo "Computed NEW_VERSION=$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      dev_version: ${{ needs.build.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create Dev Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: dev-${{ needs.build.outputs.new_version }}
          NOTE: Dev build for testing
        run: |
          echo "Creating release $TAG"
          gh release create "$TAG" --notes "$NOTE"
          echo "✅ Release created: $TAG"
          echo "🔹 Please manually upload build.zip in GitHub Releases"

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      staging_version: ${{ needs.build.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: staging-${{ needs.build.outputs.new_version }}
          NOTE: Pre-production test release
        run: |
          echo "Creating release $TAG"
          gh release create "$TAG" --notes "$NOTE"
          echo "✅ Release created: $TAG"
          echo "🔹 Please manually upload build.zip in GitHub Releases"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-${{ needs.staging_version || needs.build.outputs.new_version }}
          NOTE: Production release
        run: |
          echo "Attempting production release $TAG"
          if gh release create "$TAG" --notes "$NOTE"; then
            echo "✅ Production release succeeded: $TAG"
            echo "🔹 Please manually upload build.zip in GitHub Releases"
          else
            echo "❌ Production release failed. Attempting cleanup..."
            if gh release view "$TAG" >/dev/null 2>&1; then
              gh release delete "$TAG" -y || true
            fi
            git tag -d "$TAG" || true
            git push origin :refs/tags/"$TAG" || true
            exit 1
          fi
