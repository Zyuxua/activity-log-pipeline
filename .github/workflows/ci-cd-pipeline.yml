name: CI/CD Pipeline Advanced

# 允許 GITHUB_TOKEN 在 workflow 中寫入 release/contents & 建 issue
permissions:
  contents: write
  issues: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 20

jobs:
  # ---------------- Build Job ----------------
  build:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Build project
        run: |
          npm run build
          # 建置輸出打包
          zip -r build.zip dist || true

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

      - name: Determine Version (patch +1)
        id: version
        run: |
          # 讀取 package.json 的 version，patch +1
          VERSION=$(node -p "require('./package.json').version")
          if [ -z "$VERSION" ]; then
            echo "No version found in package.json, defaulting to 0.0.1"
            VERSION="0.0.0"
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          if [ -z "$PATCH" ]; then
            PATCH=0
          fi
          PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Computed NEW_VERSION=$NEW_VERSION"
          # step output 供 job outputs 使用
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  # ---------------- Deploy Dev ----------------
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute unique tag for dev
        id: compute_dev_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BASE_TAG="dev-v${{ needs.build.outputs.new_version }}"
          OWNER_REPO="${{ github.repository }}"   # owner/repo
          # Check via GitHub API if a release with BASE_TAG already exists
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${OWNER_REPO}/releases/tags/${BASE_TAG}")
          if [ "$STATUS" = "200" ]; then
            # 已存在，附加 run id 保證唯一
            TAG="${BASE_TAG}-ci${GITHUB_RUN_ID}"
          else
            TAG="${BASE_TAG}"
          fi
          echo "Computed TAG=$TAG"
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Create Dev Release (API)
        id: create_dev_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.compute_dev_tag.outputs.tag_name }}
          release_name: ${{ steps.compute_dev_tag.outputs.tag_name }}
          body: Dev build for testing

      - name: Upload asset to Dev release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_dev_release.outputs.upload_url }}
          asset_path: build.zip
          asset_name: build.zip
          asset_content_type: application/zip

  # ---------------- Deploy Staging ----------------
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute unique tag for staging
        id: compute_staging_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BASE_TAG="staging-v${{ needs.build.outputs.new_version }}"
          OWNER_REPO="${{ github.repository }}"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${OWNER_REPO}/releases/tags/${BASE_TAG}")
          if [ "$STATUS" = "200" ]; then
            TAG="${BASE_TAG}-ci${GITHUB_RUN_ID}"
          else
            TAG="${BASE_TAG}"
          fi
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Create Staging Release (API)
        id: create_staging_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.compute_staging_tag.outputs.tag_name }}
          release_name: ${{ steps.compute_staging_tag.outputs.tag_name }}
          body: Pre-production test release

      - name: Upload asset to Staging release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_staging_release.outputs.upload_url }}
          asset_path: build.zip
          asset_name: build.zip
          asset_content_type: application/zip

  # ---------------- Deploy Production ----------------
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production   # 若 production 有 Required reviewers，job 會等待批准
    env:
      BASE_TAG: prod-v${{ needs.build.outputs.new_version }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute unique tag for production
        id: compute_prod_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BASE_TAG="${{ env.BASE_TAG }}"
          OWNER_REPO="${{ github.repository }}"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${OWNER_REPO}/releases/tags/${BASE_TAG}")
          if [ "$STATUS" = "200" ]; then
            TAG="${BASE_TAG}-ci${GITHUB_RUN_ID}"
          else
            TAG="${BASE_TAG}"
          fi
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Create Production Release (API)
        id: create_prod_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.compute_prod_tag.outputs.tag_name }}
          release_name: ${{ steps.compute_prod_tag.outputs.tag_name }}
          body: Production release

      - name: Upload asset to Production release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_prod_release.outputs.upload_url }}
          asset_path: build.zip
          asset_name: build.zip
          asset_content_type: application/zip

      - name: Notify Success (create an issue)
        uses: actions/github-script@v7
        with:
          script: |
            const title = `✅ Production release ${process.env.TAG} succeeded`;
            const body = `Production release ${process.env.TAG} completed successfully.\n\nReleased by: ${context.actor}\nRun: ${context.runHtmlUrl}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });
        env:
          TAG: ${{ steps.compute_prod_tag.outputs.tag_name }}
