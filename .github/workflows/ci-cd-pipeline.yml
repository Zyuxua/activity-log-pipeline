name: CI/CD Pipeline Advanced

# 允許 GITHUB_TOKEN 在 workflow 中寫入 repo contents (tag/release) 與 issues
permissions:
  contents: write
  issues: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 20

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Build project
        run: |
          npm run build
          zip -r build.zip dist

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

      - name: Determine Version
        id: version
        run: |
          # 讀取 package.json 版本，patch +1
          VERSION=$(node -p "require('./package.json').version")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Computed NEW_VERSION=$NEW_VERSION"
          # 將版本當作 step output (供 job output)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - id: create_release
        name: Create Dev Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: dev-v${{ needs.build.outputs.new_version }}
          release_name: dev-v${{ needs.build.outputs.new_version }}
          body: Dev build for testing

      - name: Upload asset to Dev release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build.zip
          asset_name: build.zip
          asset_content_type: application/zip

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - id: create_release
        name: Create Staging Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: staging-v${{ needs.build.outputs.new_version }}
          release_name: staging-v${{ needs.build.outputs.new_version }}
          body: Pre-production test release

      - name: Upload asset to Staging release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build.zip
          asset_name: build.zip
          asset_content_type: application/zip

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    env:
      TAG: prod-v${{ needs.build.outputs.new_version }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - id: create_release
        name: Create Production Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          body: Production release

      - name: Upload asset to Production release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build.zip
          asset_name: build.zip
          asset_content_type: application/zip

      - name: Notify Success (create an issue)
        uses: actions/github-script@v7
        with:
          script: |
            const title = `✅ Production release ${process.env.TAG} succeeded`;
            const body = `Production release ${process.env.TAG} completed successfully.\n\nReleased by: ${context.actor}\nRun: ${context.runHtmlUrl}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });
        env:
          TAG: ${{ env.TAG }}
